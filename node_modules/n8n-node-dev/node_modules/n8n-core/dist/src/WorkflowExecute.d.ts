import * as PCancelable from 'p-cancelable';
import { IConnection, IExecutionError, INode, INodeExecutionData, IRun, IRunData, IRunExecutionData, IWorkflowExecuteAdditionalData, WorkflowExecuteMode, Workflow } from 'n8n-workflow';
export declare class WorkflowExecute {
    runExecutionData: IRunExecutionData;
    private additionalData;
    private mode;
    constructor(additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, runExecutionData?: IRunExecutionData);
    run(workflow: Workflow, startNode?: INode, destinationNode?: string): PCancelable<IRun>;
    runPartialWorkflow(workflow: Workflow, runData: IRunData, startNodes: string[], destinationNode: string): PCancelable<IRun>;
    executeHook(hookName: string, parameters: any[]): Promise<void>;
    addNodeToBeExecuted(workflow: Workflow, connectionData: IConnection, outputIndex: number, parentNodeName: string, nodeSuccessData: INodeExecutionData[][], runIndex: number): void;
    processRunExecutionData(workflow: Workflow): PCancelable<IRun>;
    processSuccessExecution(startedAt: Date, workflow: Workflow, executionError?: IExecutionError): PCancelable<IRun>;
    getFullRunData(startedAt: Date): IRun;
}
