"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
const tmpl = require("riot-tmpl");
tmpl.brackets.set('{{ }}');
tmpl.tmpl.errorHandler = () => { };
class Expression {
    constructor(workflow) {
        this.workflow = workflow;
    }
    convertObjectValueToString(value) {
        const typeName = Array.isArray(value) ? 'Array' : 'Object';
        return `[${typeName}: ${JSON.stringify(value)}]`;
    }
    resolveSimpleParameterValue(parameterValue, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData, returnObjectAsString = false) {
        if (typeof parameterValue !== 'string' || parameterValue.charAt(0) !== '=') {
            return parameterValue;
        }
        parameterValue = parameterValue.substr(1);
        const dataProxy = new _1.WorkflowDataProxy(this.workflow, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData);
        const data = dataProxy.getDataProxy();
        try {
            const returnValue = tmpl.tmpl(parameterValue, data);
            if (typeof returnValue === 'function') {
                throw new Error('Expression resolved to a function. Please add "()"');
            }
            else if (returnValue !== null && typeof returnValue === 'object') {
                if (returnObjectAsString === true) {
                    return this.convertObjectValueToString(returnValue);
                }
            }
            return returnValue;
        }
        catch (e) {
            throw new Error(`Expression is not valid: ${e.message}`);
        }
    }
    getSimpleParameterValue(node, parameterValue, defaultValue) {
        if (parameterValue === undefined) {
            return defaultValue;
        }
        const runIndex = 0;
        const itemIndex = 0;
        const connectionInputData = [];
        const runData = {
            resultData: {
                runData: {},
            }
        };
        return this.getParameterValue(parameterValue, runData, runIndex, itemIndex, node.name, connectionInputData);
    }
    getComplexParameterValue(node, parameterValue, defaultValue = undefined) {
        if (parameterValue === undefined) {
            return defaultValue;
        }
        const runIndex = 0;
        const itemIndex = 0;
        const connectionInputData = [];
        const runData = {
            resultData: {
                runData: {},
            }
        };
        const returnData = this.getParameterValue(parameterValue, runData, runIndex, itemIndex, node.name, connectionInputData);
        return this.getParameterValue(returnData, runData, runIndex, itemIndex, node.name, connectionInputData);
    }
    getParameterValue(parameterValue, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData, returnObjectAsString = false) {
        const isComplexParameter = (value) => {
            return typeof value === 'object';
        };
        const resolveParameterValue = (value) => {
            if (isComplexParameter(value)) {
                return this.getParameterValue(value, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData, returnObjectAsString);
            }
            else {
                return this.resolveSimpleParameterValue(value, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData, returnObjectAsString);
            }
        };
        if (!isComplexParameter(parameterValue)) {
            return this.resolveSimpleParameterValue(parameterValue, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData, returnObjectAsString);
        }
        if (Array.isArray(parameterValue)) {
            const returnData = [];
            for (const item of parameterValue) {
                returnData.push(resolveParameterValue(item));
            }
            if (returnObjectAsString === true && typeof returnData === 'object') {
                return this.convertObjectValueToString(returnData);
            }
            return returnData;
        }
        else if (parameterValue === null) {
            return parameterValue;
        }
        else {
            const returnData = {};
            for (const key of Object.keys(parameterValue)) {
                returnData[key] = resolveParameterValue(parameterValue[key]);
            }
            if (returnObjectAsString === true && typeof returnData === 'object') {
                return this.convertObjectValueToString(returnData);
            }
            return returnData;
        }
    }
}
exports.Expression = Expression;
//# sourceMappingURL=Expression.js.map