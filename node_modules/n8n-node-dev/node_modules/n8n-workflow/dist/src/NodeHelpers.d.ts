import { IContextObject, INodeCredentialDescription, INode, INodeExecutionData, INodeIssues, INodeParameters, INodeProperties, INodeType, IParameterDependencies, IRunExecutionData, IWebhookData, IWorkflowExecuteAdditionalData, NodeParameterValue } from './Interfaces';
import { Workflow } from './Workflow';
export declare function getSpecialNodeParameters(nodeType: INodeType): {
    displayName: string;
    name: string;
    type: string;
    typeOptions: {
        multipleValues: boolean;
        multipleValueButtonText: string;
    };
    default: {};
    description: string;
    placeholder: string;
    options: {
        name: string;
        displayName: string;
        values: ({
            displayName: string;
            name: string;
            type: string;
            options: {
                name: string;
                value: string;
            }[];
            default: string;
            description: string;
            typeOptions?: undefined;
            displayOptions?: undefined;
        } | {
            displayName: string;
            name: string;
            type: string;
            typeOptions: {
                minValue: number;
                maxValue: number;
            };
            displayOptions: {
                hide: {
                    mode: string[];
                };
                show?: undefined;
            };
            default: number;
            description: string;
            options?: undefined;
        } | {
            displayName: string;
            name: string;
            type: string;
            displayOptions: {
                show: {
                    mode: string[];
                };
                hide?: undefined;
            };
            typeOptions: {
                minValue: number;
                maxValue: number;
            };
            default: number;
            description: string;
            options?: undefined;
        } | {
            displayName: string;
            name: string;
            type: string;
            displayOptions: {
                show: {
                    mode: string[];
                };
                hide?: undefined;
            };
            options: {
                name: string;
                value: string;
            }[];
            default: string;
            description: string;
            typeOptions?: undefined;
        } | {
            displayName: string;
            name: string;
            type: string;
            displayOptions: {
                show: {
                    mode: string[];
                };
                hide?: undefined;
            };
            default: string;
            description: string;
            options?: undefined;
            typeOptions?: undefined;
        })[];
    }[];
}[];
export declare function displayParameter(nodeValues: INodeParameters, parameter: INodeProperties | INodeCredentialDescription, nodeValuesRoot?: INodeParameters): boolean;
export declare function displayParameterPath(nodeValues: INodeParameters, parameter: INodeProperties | INodeCredentialDescription, path: string): boolean;
export declare function getContext(runExecutionData: IRunExecutionData, type: string, node?: INode): IContextObject;
export declare function getParamterDependencies(nodePropertiesArray: INodeProperties[]): IParameterDependencies;
export declare function getParamterResolveOrder(nodePropertiesArray: INodeProperties[], parameterDependencies: IParameterDependencies): number[];
export declare function getNodeParameters(nodePropertiesArray: INodeProperties[], nodeValues: INodeParameters, returnDefaults: boolean, returnNoneDisplayed: boolean, onlySimpleTypes?: boolean, dataIsResolved?: boolean, nodeValuesRoot?: INodeParameters, parentType?: string, parameterDependencies?: IParameterDependencies): INodeParameters | null;
export declare function prepareOutputData(outputData: INodeExecutionData[], outputIndex?: number): Promise<INodeExecutionData[][]>;
export declare function getNodeWebhooks(workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData): IWebhookData[];
export declare function getNodeWebhooksBasic(workflow: Workflow, node: INode): IWebhookData[];
export declare function getNodeWebhookPath(workflowId: string, node: INode, path: string, isFullPath?: boolean): string;
export declare function getNodeWebhookUrl(baseUrl: string, workflowId: string, node: INode, path: string, isFullPath?: boolean): string;
export declare function getNodeParametersIssues(nodePropertiesArray: INodeProperties[], node: INode): INodeIssues | null;
export declare function nodeIssuesToString(issues: INodeIssues, node?: INode): string[];
export declare function addToIssuesIfMissing(foundIssues: INodeIssues, nodeProperties: INodeProperties, value: NodeParameterValue): void;
export declare function getParameterValueByPath(nodeValues: INodeParameters, parameterName: string, path: string): string | number | boolean | INodeParameters | (string | number | boolean)[] | INodeParameters[];
export declare function getParameterIssues(nodeProperties: INodeProperties, nodeValues: INodeParameters, path: string): INodeIssues;
export declare function mergeIssues(destination: INodeIssues, source: INodeIssues | null): void;
export declare function mergeNodeProperties(mainProperties: INodeProperties[], addProperties: INodeProperties[]): void;
