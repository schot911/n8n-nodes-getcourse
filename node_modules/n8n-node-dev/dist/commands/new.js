"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.New = void 0;
const changeCase = __importStar(require("change-case"));
const fs = __importStar(require("fs"));
const inquirer = __importStar(require("inquirer"));
const command_1 = require("@oclif/command");
const path_1 = require("path");
const { promisify } = require('util');
const fsAccess = promisify(fs.access);
const src_1 = require("../src");
class New extends command_1.Command {
    async run() {
        try {
            this.log('\nCreate new credentials/node');
            this.log('=========================');
            const typeQuestion = {
                name: 'type',
                type: 'list',
                default: 'Node',
                message: 'What do you want to create?',
                choices: [
                    'Credentials',
                    'Node',
                ],
            };
            const typeAnswers = await inquirer.prompt(typeQuestion);
            let sourceFolder = '';
            const sourceFileName = 'simple.ts';
            let defaultName = '';
            let getDescription = false;
            if (typeAnswers.type === 'Node') {
                getDescription = true;
                const nodeTypeQuestion = {
                    name: 'nodeType',
                    type: 'list',
                    default: 'Execute',
                    message: 'What kind of node do you want to create?',
                    choices: [
                        'Execute',
                        'Trigger',
                        'Webhook',
                    ],
                };
                const nodeTypeAnswers = await inquirer.prompt(nodeTypeQuestion);
                sourceFolder = 'execute';
                defaultName = 'My Node';
                if (nodeTypeAnswers.nodeType === 'Trigger') {
                    sourceFolder = 'trigger';
                    defaultName = 'My Trigger';
                }
                else if (nodeTypeAnswers.nodeType === 'Webhook') {
                    sourceFolder = 'webhook';
                    defaultName = 'My Webhook';
                }
            }
            else {
                sourceFolder = 'credentials';
                defaultName = 'My Service API';
            }
            const additionalQuestions = [
                {
                    name: 'name',
                    type: 'input',
                    default: defaultName,
                    message: 'How should the node be called?',
                },
            ];
            if (getDescription === true) {
                additionalQuestions.push({
                    name: 'description',
                    type: 'input',
                    default: 'Node converts input data to chocolate',
                    message: 'What should the node description be?',
                });
            }
            const additionalAnswers = await inquirer.prompt(additionalQuestions);
            const nodeName = additionalAnswers.name;
            const destinationFilePath = path_1.join(process.cwd(), `${changeCase.pascalCase(nodeName)}.${typeAnswers.type.toLowerCase()}.ts`);
            const sourceFilePath = path_1.join(__dirname, '../../templates', sourceFolder, sourceFileName);
            try {
                await fsAccess(destinationFilePath);
                const overwriteQuestion = [
                    {
                        name: 'overwrite',
                        type: 'confirm',
                        default: false,
                        message: `The file "${destinationFilePath}" already exists and would be overwritten. Do you want to proceed and overwrite the file?`,
                    },
                ];
                const overwriteAnswers = await inquirer.prompt(overwriteQuestion);
                if (overwriteAnswers.overwrite === false) {
                    this.log('\nNode creation got canceled!');
                    return;
                }
            }
            catch (error) {
            }
            const replaceValues = {
                ClassNameReplace: changeCase.pascalCase(nodeName),
                DisplayNameReplace: changeCase.capitalCase(nodeName),
                N8nNameReplace: changeCase.camelCase(nodeName),
                NodeDescriptionReplace: additionalAnswers.description,
            };
            await src_1.createTemplate(sourceFilePath, destinationFilePath, replaceValues);
            this.log('\nExecution was successfull:');
            this.log('====================================');
            this.log('Node got created: ' + destinationFilePath);
        }
        catch (error) {
            this.log(`\nGOT ERROR: "${error.message}"`);
            this.log('====================================');
            this.log(error.stack);
            return;
        }
    }
}
exports.New = New;
New.description = 'Create new credentials/node';
New.examples = [
    `$ n8n-node-dev new`,
];
//# sourceMappingURL=new.js.map